#!/usr/bin/env python

import thread
from multiprocessing.dummy import Pool

import socket,sys,classes

from optparse import OptionParser

import modules.live.stream as livestream
import modules.motion.detection as detection

import modules.datetime.datetime as datetime
import cv2,sys,time,smtplib,threading,glob,re,os,subprocess

from __init__ import *
from time import sleep
from optparse import OptionParser

from email.MIMEImage import MIMEImage
from email.MIMEMultipart import MIMEMultipart

class Server():

    def __init__(self):

        parser = OptionParser()
        parser.add_option("-i",
            "--ip", dest='ip', help='"This is the IP address of the server."',default='0.0.0.0')
        parser.add_option("-S",
            "--server-port", dest='server_port', help='"Server port defaults to port 5051"', type="int", default=5051)
        parser.add_option("-e",
            "--email", dest='email', help='"This argument is required!"')
        parser.add_option("-p",
            "--password", dest='password', help='"This argument is required!"')
        parser.add_option("-c",
            "--camera", dest='camera', help='"Camera index number."', type="int", default=0)
        parser.add_option("-E",
            "--email-port", dest='email_port', help='"E-mail port defaults to port 587"', type="int", default=587)
        (options, args) = parser.parse_args()

        self.ip = options.ip
        self.server_port = options.server_port
        self.email_port = options.email_port
        self.email = options.email
        self.camera = options.camera
        self.password = options.password

        if self.email is None or self.password is None:
            print("\nERROR: Both E-mail and password are required!\n")
            parser.print_help()
            sys.exit(0)

    def main(self):

        d = classes.MotionDetection(self.email,self.password,self.email_port,self.camera)

        s = socket.socket()
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        s.bind(('', 50050))
        s.listen(5)
        #thread.start_new_thread(d.capture,("",""))
        pool = Pool(10)
        asyncresponse = pool.map(d.capture, "")
        pool.close()
        pool.join()
        #c, addr = s.accept()

        print("Listening for connections.")
        while(True):
            try:
                c, addr = s.accept()
                print("Received connection from " + str(addr))
                mes = c.recv(1024)

                if(mes == 'start_monitor'):
                    print("Starting camera!")
                    d.kill_cam()
                    c.send("Starting camera!")
                    c.close()
                elif(mes == 'kill_monitor'):
                    print("Killing camera!")
                    c.send("Killing camera!")
                elif(mes == 'start_motion'):
                    print("Starting motion sensor!")
                    c.send("Starting motion sensor!")
                elif(mes == 'kill_motion'):
                    print("Killing motion sensor!")
                    c.send("Killing motion sensor!")
                    d.kill_cam()
                elif(mes == 'probe'):
                    print("Server is alive.")
                    c.send("Server is alive.")
                else:
                    print(mes + " is not a known command.")
                    c.send(mes + " is not a konwn command!")
            except Exception as e:
                print("Socket accept error: " + str(e))
        c.close()

if __name__ == '__main__':
    s = Server()
    s.main()
